generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AccountType {
  CORRENTE
  POUPANCA
  SALARIO
  CARTEIRA_MOVEL
  CONJUNTA
  INVESTIMENTO
}

enum TransactionType {
  RECEITA
  DESPESA
  INVESTIMENTO
}

// Models
model User {
  id             String          @id @default(uuid())
  name           String
  surname        String
  email          String          @unique
  password       String
  contact        String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  accounts       Account[]
  transactions   Transaction[]
  budgets        Budget[]
  creditCards    CreditCard[]
  incomeSources  IncomeSource[]
}



model Account {
  id                Int             @id @default(autoincrement())
  accountName       String
  accountType       AccountType
  accountHolderName String
  balance           Decimal         @default(0) @db.Decimal(10, 2)
  userId            String
  bankId            Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user              User            @relation(fields: [userId], references: [id])
  bank              Bank?           @relation(fields: [bankId], references: [id])

  transactions      Transaction[]   @relation("MainAccount")
  debitTransactions Transaction[]   @relation("DebitAccount")

  @@unique([userId, accountType])
}

model Transaction {
  id               Int              @id @default(autoincrement())
  description      String
  amount           Decimal          @db.Decimal(10, 2)
  type             TransactionType
  date             DateTime
  month            Int
  year             Int
  userId           String
  accountId        Int
  debitAccountId   Int?
  categoryId       Int
  incomeSourceId   Int?

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user             User             @relation(fields: [userId], references: [id])
  account          Account          @relation("MainAccount", fields: [accountId], references: [id])
  debitAccount     Account?         @relation("DebitAccount", fields: [debitAccountId], references: [id])
  category         Category         @relation(fields: [categoryId], references: [id])
  incomeSource     IncomeSource?    @relation(fields: [incomeSourceId], references: [id])

  notes            TransactionNote[]
  attachments      TransactionAttachment[]

  @@index([userId])
  @@index([accountId])
  @@index([debitAccountId])
  @@index([date])
  @@index([month])
  @@index([year])
  @@index([categoryId])
  @@index([incomeSourceId])
}

model Category {
  id         Int              @id @default(autoincrement())
  categoryName       String
  categoryType       TransactionType
  icon       String?
  color      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  transactions      Transaction[]
  budgets          Budget[]
  creditCardExpenses CreditCardExpense[]

  @@unique([categoryName, categoryType])
}

model Budget {
  id          Int       @id @default(autoincrement())
  userId      String
  categoryId  Int
  month       Int
  year        Int
  limit       Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId, month, year])
}

model Bank {
  id        Int      @id @default(autoincrement())
  bankName      String
  logoUrl   String?
  accounts  Account[]
}

model CreditCard {
  id          Int       @id @default(autoincrement())
  name        String
  limit       Decimal   @db.Decimal(10, 2)
  dueDay      Int
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  expenses    CreditCardExpense[]
}

model CreditCardExpense {
  id            Int       @id @default(autoincrement())
  description   String
  amount        Decimal   @db.Decimal(10, 2)
  date          DateTime
  categoryId    Int
  creditCardId  Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  category      Category   @relation(fields: [categoryId], references: [id])
  creditCard    CreditCard @relation(fields: [creditCardId], references: [id])
}

model TransactionNote {
  id             Int         @id @default(autoincrement())
  content        String
  transactionId  Int
  createdAt      DateTime    @default(now())

  transaction    Transaction @relation(fields: [transactionId], references: [id])
}

model TransactionAttachment {
  id             Int         @id @default(autoincrement())
  fileUrl        String
  fileType       String
  transactionId  Int
  createdAt      DateTime    @default(now())

  transaction    Transaction @relation(fields: [transactionId], references: [id])
}

model IncomeSource {
  id            Int           @id @default(autoincrement())
  name          String
  userId        String
  createdAt     DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]
}

model Debt {
  id            String   @id @default(uuid())
  descricao     String
  valor         Float
  credor        String
  dataVencimento DateTime
  status        String   // 'pendente' ou 'paga'
  observacoes   String?
  dataPagamento DateTime?
  createdAt     DateTime @default(now())
}